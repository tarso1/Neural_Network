#include<iostream>
#include "network.h"

using namespace std;
int main(){
	
	/*
	double X_[3][6] = {{1,0,1,1,1,0},
					   {1,0,0,0,1,0},
					   {1,0,1,0,0,1}};
						
	double y_[2][6] = {{1,0,0,0,1,0},
					   {0,0,1,1,0,1},
					   };
	
	double x1_[] = {0,0,0};
	double x2_[] = {1,1,1};
	double x3_[] = {1,1,0};
	double x4_[] = {1,0,0};
	double x5_[] = {0,1,0};
	double x6_[] = {0,1,1};
	
	Matrix<double> X(X_[0],3,6);
	Matrix<double> y(y_[0],2,6);
	Matrix<double> x1(x1_,3,1);
	Matrix<double> x2(x2_,3,1);
	Matrix<double> x3(x3_,3,1);
	Matrix<double> x4(x4_,3,1);
	Matrix<double> x5(x5_,3,1);
	Matrix<double> x6(x6_,3,1);
	
	network<double> nn(3);
	nn.add_Dense(50, "relu");
	nn.add_Dense(2, "softmax");
	
	nn.summary();
	
	double learning_rate = 0.1;
	unsigned epochs = 10000;
	std::string activation = "cross_entropy";
	int batch = 0;
	bool shuffle = true;
	bool print_cost = true;
	
	nn.train(X, y, learning_rate, epochs, activation, batch, shuffle, print_cost);

	nn.predict(x1).printM();
	nn.predict(x2).printM();
	nn.predict(x3).printM();
	nn.predict(x4).printM();
	nn.predict(x5).printM();
	nn.predict(x6).printM();
	*/
	
	/*
	double x_[] = {0.  , 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1 ,
       0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2 , 0.21,
       0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3 , 0.31, 0.32,
       0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4 , 0.41, 0.42, 0.43,
       0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5 , 0.51, 0.52, 0.53, 0.54,
       0.55, 0.56, 0.57, 0.58, 0.59, 0.6 , 0.61, 0.62, 0.63, 0.64, 0.65,
       0.66, 0.67, 0.68, 0.69, 0.7 , 0.71, 0.72, 0.73, 0.74, 0.75, 0.76,
       0.77, 0.78, 0.79, 0.8 , 0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87,
       0.88, 0.89, 0.9 , 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98,
       0.99};
    double y_[] = {1.  , 1.02, 1.04, 1.06, 1.08, 1.1 , 1.12, 1.14, 1.16, 1.18, 1.2 ,
       1.22, 1.24, 1.26, 1.28, 1.3 , 1.32, 1.34, 1.36, 1.38, 1.4 , 1.42,
       1.44, 1.46, 1.48, 1.5 , 1.52, 1.54, 1.56, 1.58, 1.6 , 1.62, 1.64,
       1.66, 1.68, 1.7 , 1.72, 1.74, 1.76, 1.78, 1.8 , 1.82, 1.84, 1.86,
       1.88, 1.9 , 1.92, 1.94, 1.96, 1.98, 2.  , 2.02, 2.04, 2.06, 2.08,
       2.1 , 2.12, 2.14, 2.16, 2.18, 2.2 , 2.22, 2.24, 2.26, 2.28, 2.3 ,
       2.32, 2.34, 2.36, 2.38, 2.4 , 2.42, 2.44, 2.46, 2.48, 2.5 , 2.52,
       2.54, 2.56, 2.58, 2.6 , 2.62, 2.64, 2.66, 2.68, 2.7 , 2.72, 2.74,
       2.76, 2.78, 2.8 , 2.82, 2.84, 2.86, 2.88, 2.9 , 2.92, 2.94, 2.96,
       2.98};
       
    Matrix<double> x(x_,1,100), y(y_,1,100);
    
	network<double> nn(1);
	nn.add_Dense(1, "None");
	
	double learning_rate = 0.1;
	unsigned epochs = 10000;
	std::string activation = "mse";
	int batch = 50;
	bool shuffle = true;
	bool print_cost = true;
	
	nn.train(x, y, learning_rate, epochs, activation, batch, shuffle, print_cost);
    nn.get_W(1).printM();
    nn.get_b(1).printM();
    */
    double x_[2][100] = {{0.  , 0.1 , 0.2 , 0.3 , 0.4 , 0.5 , 0.6 , 0.7 , 0.8 , 0.9 , 1.  ,
        1.1 , 1.2 , 1.3 , 1.4 , 1.5 , 1.6 , 1.7 , 1.8 , 1.9 , 2.  , 2.1 ,
        2.2 , 2.3 , 2.4 , 2.5 , 2.6 , 2.7 , 2.8 , 2.9 , 3.  , 3.1 , 3.2 ,
        3.3 , 3.4 , 3.5 , 3.6 , 3.7 , 3.8 , 3.9 , 4.  , 4.1 , 4.2 , 4.3 ,
        4.4 , 4.5 , 4.6 , 4.7 , 4.8 , 4.9 , 5.  , 5.1 , 5.2 , 5.3 , 5.4 ,
        5.5 , 5.6 , 5.7 , 5.8 , 5.9 , 6.  , 6.1 , 6.2 , 6.3 , 6.4 , 6.5 ,
        6.6 , 6.7 , 6.8 , 6.9 , 7.  , 7.1 , 7.2 , 7.3 , 7.4 , 7.5 , 7.6 ,
        7.7 , 7.8 , 7.9 , 8.  , 8.1 , 8.2 , 8.3 , 8.4 , 8.5 , 8.6 , 8.7 ,
        8.8 , 8.9 , 9.  , 9.1 , 9.2 , 9.3 , 9.4 , 9.5 , 9.6 , 9.7 , 9.8 ,
        9.9 },
       {
	   0.  , 0.05, 0.1 , 0.15, 0.2 , 0.25, 0.3 , 0.35, 0.4 , 0.45, 0.5 ,
        0.55, 0.6 , 0.65, 0.7 , 0.75, 0.8 , 0.85, 0.9 , 0.95, 1.  , 1.05,
        1.1 , 1.15, 1.2 , 1.25, 1.3 , 1.35, 1.4 , 1.45, 1.5 , 1.55, 1.6 ,
        1.65, 1.7 , 1.75, 1.8 , 1.85, 1.9 , 1.95, 2.  , 2.05, 2.1 , 2.15,
        2.2 , 2.25, 2.3 , 2.35, 2.4 , 2.45, 2.5 , 2.55, 2.6 , 2.65, 2.7 ,
        2.75, 2.8 , 2.85, 2.9 , 2.95, 3.  , 3.05, 3.1 , 3.15, 3.2 , 3.25,
        3.3 , 3.35, 3.4 , 3.45, 3.5 , 3.55, 3.6 , 3.65, 3.7 , 3.75, 3.8 ,
        3.85, 3.9 , 3.95, 4.  , 4.05, 4.1 , 4.15, 4.2 , 4.25, 4.3 , 4.35,
        4.4 , 4.45, 4.5 , 4.55, 4.6 , 4.65, 4.7 , 4.75, 4.8 , 4.85, 4.9 ,
        4.95}};
        
    double y_[] = { 0.  ,  0.25,  0.5 ,  0.75,  1.  ,  1.25,  1.5 ,  1.75,  2.  ,
         2.25,  2.5 ,  2.75,  3.  ,  3.25,  3.5 ,  3.75,  4.  ,  4.25,
         4.5 ,  4.75,  5.  ,  5.25,  5.5 ,  5.75,  6.  ,  6.25,  6.5 ,
         6.75,  7.  ,  7.25,  7.5 ,  7.75,  8.  ,  8.25,  8.5 ,  8.75,
         9.  ,  9.25,  9.5 ,  9.75, 10.  , 10.25, 10.5 , 10.75, 11.  ,
        11.25, 11.5 , 11.75, 12.  , 12.25, 12.5 , 12.75, 13.  , 13.25,
        13.5 , 13.75, 14.  , 14.25, 14.5 , 14.75, 15.  , 15.25, 15.5 ,
        15.75, 16.  , 16.25, 16.5 , 16.75, 17.  , 17.25, 17.5 , 17.75,
        18.  , 18.25, 18.5 , 18.75, 19.  , 19.25, 19.5 , 19.75, 20.  ,
        20.25, 20.5 , 20.75, 21.  , 21.25, 21.5 , 21.75, 22.  , 22.25,
        22.5 , 22.75, 23.  , 23.25, 23.5 , 23.75, 24.  , 24.25, 24.5 ,
        24.75};
       
        Matrix<double> x(x_[0],2,100), y(y_,1,100);
		network<double> nn(2);
		//nn.add_Dense(10,"relu");
		nn.add_Dense(1, "None");
	
		double learning_rate = 0.001;
		unsigned epochs = 500;
		std::string activation = "mse";
		int batch = 20;
		bool shuffle = true;
		bool print_cost = true;
		
		
		nn.train(x, y, learning_rate, epochs, activation, batch, shuffle, print_cost);
	    nn.get_W(1).printM();
	    nn.get_b(1).printM();
	    
	    //x.shape();
    
}
